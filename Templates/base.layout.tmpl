{{define "base"}}
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Make Reservation</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <!-- Stylesheet for date picker -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">

  <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
  <link rel="stylesheet" type="text/css" href="/static/css/styles.css">


</head>

<body>
  <!-- The Menu -->
  <nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark border-bottom border-body" data-bs-theme="dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Navbar</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/about">About</a>
          </li>

          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Rooms
            </a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="/bigroom">Big Room</a></li>
              <li><a class="dropdown-item" href="/littleroom">Little Room</a></li>

            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/search-availability">Booking</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/contact">Contact</a>
          </li>
        </ul>

      </div>
    </div>
  </nav>
  {{block "content" .}}

  {{end}}
  <!-- The footer -->
  <div class="row my-footer">

    <div class="col">
      Left
    </div>

    <div class="col">
      Middle
    </div>

    <div class="col">
      Right
    </div>

  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.2/dist/js/datepicker-full.min.js"></script>
  <script src="https://unpkg.com/notie"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  {{block "js" .}}

  {{end}}


  <script>

    let attention = prompt();
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (() => {
      'use strict'

      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      const forms = document.querySelectorAll('.needs-validation')

      // Loop over them and prevent submission
      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }

          form.classList.add('was-validated')
        }, false)
      })
    })()






    // notify will show a notie.alert
    function notify(msg, msgType) {
      notie.alert({
        type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
        text: msg,

      })
    }

    /* notifyModal will show a modal notification */
    function notifyModal(title, text, icon, confirmButtonText) {
      Swal.fire({
        title: title,
        text: text,
        icon: icon,
        confirmButtonText: confirmButtonText,
      })
    }

    /* prompt sets up notification functions for toast, success, error and custom */
    function prompt() {
      let toast = function (c) {
        const {
          msg = "not set",
          icon = "success",
          position = "top-end",
        } = c;
        const Toast = Swal.mixin({
          toast: true,
          title: msg,
          icon: icon,
          position: position,
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          }
        });
        Toast.fire({});
      }

      let success = function (c) {
        const {
          msg = "",
          icon = "success",
          title = "Success!",
          footer = "<p>Footer</p>"
        } = c;
        Swal.fire({
          icon: icon,
          title: title,
          text: msg,
          footer: footer,
        });
      }

      let error = function (c) {
        const {
          msg = "",
          icon = "error",
          title = "Error!",
          footer = "<p>Footer</p>"
        } = c;
        Swal.fire({
          icon: icon,
          title: title,
          text: msg,
          footer: footer,
        });
      }

      async function custom(c) {
        const {
          msg = "",
          title = "",
        } = c;

        const { value: result,isDismissed: dismissed,dismiss: DismissReason } = await Swal.fire({
          title: title,
          html: msg,
          backdrop: false,
          showCancelButton: true,
          focusConfirm: false,
          willOpen:()=>{
            if(c.willOpen!==undefined){
              c.willOpen();
            }
          },
          didOpen: () => {
            if(c.didOpen!==undefined){
              c.didOpen();
            }
          },
          preConfirm: () => {
            return [
              document.getElementById("start").value,
              document.getElementById("end").value
            ];
          }
        });

        if (dismissed){
          console.log(dismissed)
          console.log(DismissReason)
        }

        if (result) {

          if (result.dismiss !== Swal.DismissReason.cancel) {

            if (result.value !== "") {
              if (c.callback !== undefined) {

                c.callback(result)
              }
            } else {

              c.callback(false)
            }
          } else {

            c.callback(false)
          }
        } else {

        }
      }

      return {
        toast: toast,
        success: success,
        error: error,
        custom: custom,
      }
    }



  </script>


</body>

</html>
{{end}}